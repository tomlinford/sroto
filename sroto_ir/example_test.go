package sroto_ir_test

import (
	"testing"

	"github.com/tomlinford/sroto/sroto_ir"
)

var Timestamp = &sroto_ir.Type{
	"Timestamp",
	"google/protobuf/timestamp.proto",
	"google.protobuf",
}

var file = &sroto_ir.File{
	Name:    "example.proto",
	Package: "example",
	CustomOptions: []sroto_ir.CustomOption{
		{
			Name:       "unique",
			Number:     6001,
			Type:       sroto_ir.Type{Name: "bool"},
			OptionType: sroto_ir.FieldOption,
		},
	},
	Messages: []sroto_ir.Message{
		{
			Name: "EchoRequest",
			Fields: []sroto_ir.Field{
				{
					Name:   "message",
					Number: 1,
					Type:   sroto_ir.Type{Name: "string"},
				},
				{
					Name:   "timestamp",
					Number: 2,
					Type:   *Timestamp,
					Options: []sroto_ir.Option{
						{
							Type:  sroto_ir.Type{Name: "deprecated"},
							Value: true,
						},
						{
							Type: sroto_ir.Type{
								Name:     "rules",
								Filename: "validate/validate.proto",
								Package:  "validate",
							},
							Path:  "message.required",
							Value: false,
						},
					},
				},
			},
		},
	},
}

func TestSimple(t *testing.T) {
	expected := `
// Generated by srotoc. DO NOT EDIT!

syntax = "proto3";

package example;

import "google/protobuf/descriptor.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

extend google.protobuf.FieldOptions {
    bool unique = 6001;
}

message EchoRequest {
    string message = 1;
    google.protobuf.Timestamp timestamp = 2 [
        deprecated = true,
        (validate.rules) = {message: {required: false}}
    ];
}
`[1:]
	actual := file.ToAST().Print()
	if actual != expected {
		t.Errorf("got\n%q, want\n%q", actual, expected)
	}
}
